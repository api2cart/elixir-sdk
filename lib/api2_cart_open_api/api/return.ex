# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Return do
  @moduledoc """
  API calls for all endpoints tagged `Return`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  return.action.list
  Retrieve list of return actions

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ReturnActionList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_action_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ReturnActionList200Response.t} | {:error, Tesla.Env.t}
  def return_action_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/return.action.list.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ReturnActionList200Response}
    ])
  end

  @doc """
  return.count
  Count returns in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:order_ids` (String.t): Counts return requests specified by order ids
    - `:customer_id` (String.t): Counts return requests quantity specified by customer id
    - `:store_id` (String.t): Store Id
    - `:status` (String.t): Defines status
    - `:return_type` (String.t): Retrieves returns specified by return type
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ReturnCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ReturnCount200Response.t} | {:error, Tesla.Env.t}
  def return_count(connection, opts \\ []) do
    optional_params = %{
      :order_ids => :query,
      :customer_id => :query,
      :store_id => :query,
      :status => :query,
      :return_type => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :report_request_id => :query,
      :disable_report_cache => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/return.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ReturnCount200Response}
    ])
  end

  @doc """
  return.info
  Retrieve return information.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:order_id` (String.t): Defines the order id
    - `:store_id` (String.t): Store Id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ReturnInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_info(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ReturnInfo200Response.t} | {:error, Tesla.Env.t}
  def return_info(connection, id, opts \\ []) do
    optional_params = %{
      :order_id => :query,
      :store_id => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/return.info.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ReturnInfo200Response}
    ])
  end

  @doc """
  return.list
  Get list of return requests from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:order_id` (String.t): Defines the order id
    - `:order_ids` (String.t): Retrieves return requests specified by order ids
    - `:customer_id` (String.t): Retrieves return requests specified by customer id
    - `:store_id` (String.t): Store Id
    - `:status` (String.t): Defines status
    - `:return_type` (String.t): Retrieves returns specified by return type
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseReturnList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseReturnList.t} | {:error, Tesla.Env.t}
  def return_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query,
      :order_id => :query,
      :order_ids => :query,
      :customer_id => :query,
      :store_id => :query,
      :status => :query,
      :return_type => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :report_request_id => :query,
      :disable_report_cache => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/return.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseReturnList}
    ])
  end

  @doc """
  return.reason.list
  Retrieve list of return reasons

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ReturnReasonList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_reason_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ReturnReasonList200Response.t} | {:error, Tesla.Env.t}
  def return_reason_list(connection, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/return.reason.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ReturnReasonList200Response}
    ])
  end

  @doc """
  return.status.list
  Retrieve list of statuses

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ReturnStatusList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec return_status_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ReturnStatusList200Response.t} | {:error, Tesla.Env.t}
  def return_status_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/return.status.list.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ReturnStatusList200Response}
    ])
  end
end
