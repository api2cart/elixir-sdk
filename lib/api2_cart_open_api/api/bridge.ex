# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Bridge do
  @moduledoc """
  API calls for all endpoints tagged `Bridge`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  bridge.delete
  Delete bridge from the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec bridge_delete(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t} | {:error, Tesla.Env.t}
  def bridge_delete(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/bridge.delete.json")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeValueDelete200Response}
    ])
  end

  @doc """
  bridge.download
  Download bridge for store.</br>Please note that the method would not work if you call it from Swagger UI.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:whitelabel` (boolean()): Identifies if there is a necessity to download whitelabel bridge.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec bridge_download(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def bridge_download(connection, opts \\ []) do
    optional_params = %{
      :whitelabel => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/bridge.download.file")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  bridge.update
  Update bridge in the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec bridge_update(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t} | {:error, Tesla.Env.t}
  def bridge_update(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/bridge.update.json")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeUpdate200Response}
    ])
  end
end
