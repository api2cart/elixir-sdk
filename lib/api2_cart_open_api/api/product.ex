# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Product do
  @moduledoc """
  API calls for all endpoints tagged `Product`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  product.add
  Add new product to store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_add` (ProductAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductAdd200Response.t} | {:error, Tesla.Env.t}
  def product_add(connection, product_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.add.json")
      |> add_param(:body, :body, product_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductAdd200Response}
    ])
  end

  @doc """
  product.add.batch
  Add new products to the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_add_batch` (ProductAddBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_add_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductAddBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_add_batch(connection, product_add_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.add.batch.json")
      |> add_param(:body, :body, product_add_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  product.attribute.list
  Get list of attributes and values.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Retrieves attributes specified by product id
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:attribute_id` (String.t): Retrieves info for specified attribute_id
    - `:variant_id` (String.t): Defines product's variants specified by variant id
    - `:attribute_group_id` (String.t): Filter by attribute_group_id
    - `:lang_id` (String.t): Retrieves attributes specified by language id
    - `:store_id` (String.t): Retrieves attributes specified by store id
    - `:set_name` (String.t): Retrieves attributes specified by set_name in Magento
    - `:sort_by` (String.t): Set field to sort by
    - `:sort_direction` (String.t): Set sorting direction
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductAttributeList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_attribute_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductAttributeList.t} | {:error, Tesla.Env.t}
  def product_attribute_list(connection, product_id, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :attribute_id => :query,
      :variant_id => :query,
      :attribute_group_id => :query,
      :lang_id => :query,
      :store_id => :query,
      :set_name => :query,
      :sort_by => :query,
      :sort_direction => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.attribute.list.json")
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductAttributeList}
    ])
  end

  @doc """
  product.attribute.value.set
  Set attribute value to product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the attribute should be added
  - `opts` (keyword): Optional parameters
    - `:attribute_id` (String.t): Filter by attribute_id
    - `:attribute_group_id` (String.t): Filter by attribute_group_id
    - `:attribute_name` (String.t): Define attribute name
    - `:value` (String.t): Define attribute value
    - `:value_id` (integer()): Define attribute value id
    - `:lang_id` (String.t): Language id
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductAttributeValueSet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_attribute_value_set(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductAttributeValueSet200Response.t} | {:error, Tesla.Env.t}
  def product_attribute_value_set(connection, product_id, opts \\ []) do
    optional_params = %{
      :attribute_id => :query,
      :attribute_group_id => :query,
      :attribute_name => :query,
      :value => :query,
      :value_id => :query,
      :lang_id => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.attribute.value.set.json")
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductAttributeValueSet200Response}
    ])
  end

  @doc """
  product.attribute.value.unset
  Removes attribute value for a product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Product id
  - `attribute_id` (String.t): Attribute Id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:include_default` (boolean()): Boolean, whether or not to unset default value of the attribute, if applicable
    - `:reindex` (boolean()): Is reindex required
    - `:clear_cache` (boolean()): Is cache clear required

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductAttributeValueUnset200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_attribute_value_unset(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductAttributeValueUnset200Response.t} | {:error, Tesla.Env.t}
  def product_attribute_value_unset(connection, product_id, attribute_id, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :include_default => :query,
      :reindex => :query,
      :clear_cache => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.attribute.value.unset.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :attribute_id, attribute_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductAttributeValueUnset200Response}
    ])
  end

  @doc """
  product.brand.list
  Get list of brands from your store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:brand_ids` (String.t): Retrieves brands specified by brand ids
    - `:category_id` (String.t): Retrieves product brands specified by category id
    - `:parent_id` (String.t): Retrieves brands specified by parent id
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:find_where` (String.t): Entity search that is specified by the comma-separated unique fields
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductBrandList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_brand_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductBrandList.t} | {:error, Tesla.Env.t}
  def product_brand_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :brand_ids => :query,
      :category_id => :query,
      :parent_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :find_where => :query,
      :find_value => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.brand.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductBrandList}
    ])
  end

  @doc """
  product.child_item.find
  Search product child item (bundled item or configurable product variant) in store catalog.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Entity search that is specified by the comma-separated unique fields
    - `:find_params` (String.t): Entity search that is specified by comma-separated parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductChildItemFind200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_child_item_find(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductChildItemFind200Response.t} | {:error, Tesla.Env.t}
  def product_child_item_find(connection, opts \\ []) do
    optional_params = %{
      :find_value => :query,
      :find_where => :query,
      :find_params => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.child_item.find.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductChildItemFind200Response}
    ])
  end

  @doc """
  product.child_item.info
  Get child for specific product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Filter by parent product id
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:currency_id` (String.t): Currency Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductChildItemInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_child_item_info(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductChildItemInfo200Response.t} | {:error, Tesla.Env.t}
  def product_child_item_info(connection, product_id, id, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :lang_id => :query,
      :currency_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.child_item.info.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductChildItemInfo200Response}
    ])
  end

  @doc """
  product.child_item.list
  Get a list of a product's child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:product_id` (String.t): Filter by parent product id
    - `:product_ids` (String.t): Filter by parent product ids
    - `:sku` (String.t): Filter by products variant's sku
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:currency_id` (String.t): Currency Id
    - `:avail_sale` (boolean()): Specifies the set of available/not available products for sale
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Child products search that is specified by field
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:return_global` (boolean()): Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductChildItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_child_item_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductChildItemList.t} | {:error, Tesla.Env.t}
  def product_child_item_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :product_id => :query,
      :product_ids => :query,
      :sku => :query,
      :store_id => :query,
      :lang_id => :query,
      :currency_id => :query,
      :avail_sale => :query,
      :find_value => :query,
      :find_where => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :return_global => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query,
      :report_request_id => :query,
      :disable_report_cache => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.child_item.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductChildItemList}
    ])
  end

  @doc """
  product.count
  Count products in store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:product_ids` (String.t): Counts products specified by product ids
    - `:since_id` (String.t): Retrieve entities starting from the specified id.
    - `:categories_ids` (String.t): Defines product add that is specified by comma-separated categories id
    - `:category_id` (String.t): Counts products specified by category id
    - `:store_id` (String.t): Counts products specified by store id
    - `:lang_id` (String.t): Counts products specified by language id
    - `:avail_view` (boolean()): Specifies the set of visible/invisible products
    - `:avail_sale` (boolean()): Specifies the set of available/not available products for sale
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:brand_name` (String.t): Retrieves brands specified by brand name
    - `:product_attributes` ([String.t]): Defines product attributes
    - `:status` (String.t): Defines product's status
    - `:type` (String.t): Defines products's type
    - `:visible` (String.t): Filter items by visibility status
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Counts products that are searched specified by field
    - `:report_request_id` (String.t): Report request id
    - `:return_global` (boolean()): Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
    - `:disable_report_cache` (boolean()): Disable report cache for current request
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductCount200Response.t} | {:error, Tesla.Env.t}
  def product_count(connection, opts \\ []) do
    optional_params = %{
      :product_ids => :query,
      :since_id => :query,
      :categories_ids => :query,
      :category_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :avail_view => :query,
      :avail_sale => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :brand_name => :query,
      :product_attributes => :query,
      :status => :query,
      :type => :query,
      :visible => :query,
      :find_value => :query,
      :find_where => :query,
      :report_request_id => :query,
      :return_global => :query,
      :disable_report_cache => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductCount200Response}
    ])
  end

  @doc """
  product.currency.add
  Add currency and/or set default in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `iso3` (String.t): Specifies standardized currency code
  - `rate` (float()): Defines the numerical identifier against to the major currency
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): Defines currency's name
    - `:avail` (boolean()): Specifies whether the currency is available
    - `:symbol_left` (String.t): Defines the symbol that is located before the currency
    - `:symbol_right` (String.t): Defines the symbol that is located after the currency
    - `:default` (boolean()): Specifies currency's default meaning

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductCurrencyAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_currency_add(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, API2CartOpenAPI.Model.ProductCurrencyAdd200Response.t} | {:error, Tesla.Env.t}
  def product_currency_add(connection, iso3, rate, opts \\ []) do
    optional_params = %{
      :name => :query,
      :avail => :query,
      :symbol_left => :query,
      :symbol_right => :query,
      :default => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.currency.add.json")
      |> add_param(:query, :iso3, iso3)
      |> add_param(:query, :rate, rate)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductCurrencyAdd200Response}
    ])
  end

  @doc """
  product.currency.list
  Get list of currencies

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:default` (boolean()): Specifies the set of default/not default currencies
    - `:avail` (boolean()): Specifies the set of available/not available currencies
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductCurrencyList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_currency_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductCurrencyList.t} | {:error, Tesla.Env.t}
  def product_currency_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :default => :query,
      :avail => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.currency.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductCurrencyList}
    ])
  end

  @doc """
  product.delete
  Product delete

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Product id that will be removed
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerDelete200Response.t} | {:error, Tesla.Env.t}
  def product_delete(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.delete.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerDelete200Response}
    ])
  end

  @doc """
  product.delete.batch
  Remove product from the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_delete_batch` (ProductDeleteBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_delete_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductDeleteBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_delete_batch(connection, product_delete_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.delete.batch.json")
      |> add_param(:body, :body, product_delete_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  product.find
  Search product in store catalog. \"Apple\" is specified here by default.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `find_value` (String.t): Entity search that is specified by some value
  - `opts` (keyword): Optional parameters
    - `:find_where` (String.t): Entity search that is specified by the comma-separated unique fields
    - `:find_params` (String.t): Entity search that is specified by comma-separated parameters
    - `:find_what` (String.t): Parameter's value specifies the entity that has to be found
    - `:lang_id` (String.t): Search products specified by language id
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductFind200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_find(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductFind200Response.t} | {:error, Tesla.Env.t}
  def product_find(connection, find_value, opts \\ []) do
    optional_params = %{
      :find_where => :query,
      :find_params => :query,
      :find_what => :query,
      :lang_id => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.find.json")
      |> add_param(:query, :find_value, find_value)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductFind200Response}
    ])
  end

  @doc """
  product.image.add
  Add image to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_image_add` (ProductImageAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductImageAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_image_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductImageAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductImageAdd200Response.t} | {:error, Tesla.Env.t}
  def product_image_add(connection, product_image_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.image.add.json")
      |> add_param(:body, :body, product_image_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductImageAdd200Response}
    ])
  end

  @doc """
  product.image.delete
  Delete image

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the image should be deleted
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_image_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_image_delete(connection, product_id, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.image.delete.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.image.update
  Update details of image

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the image should be updated
  - `id` (String.t): Defines image update specified by image id
  - `opts` (keyword): Optional parameters
    - `:variant_ids` (String.t): Defines product's variants ids
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:image_name` (String.t): Defines image's name
    - `:type` (String.t): Defines image's types that are specified by comma-separated list
    - `:label` (String.t): Defines alternative text that has to be attached to the picture
    - `:position` (integer()): Defines image’s position in the list
    - `:hidden` (boolean()): Define is hide image

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductImageUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_image_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductImageUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_image_update(connection, product_id, id, opts \\ []) do
    optional_params = %{
      :variant_ids => :query,
      :store_id => :query,
      :lang_id => :query,
      :image_name => :query,
      :type => :query,
      :label => :query,
      :position => :query,
      :hidden => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/product.image.update.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductImageUpdate200Response}
    ])
  end

  @doc """
  product.info
  Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Retrieves product's info specified by product id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Retrieves product info specified by store id
    - `:lang_id` (String.t): Retrieves product info specified by language id
    - `:currency_id` (String.t): Currency Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_info(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductInfo200Response.t} | {:error, Tesla.Env.t}
  def product_info(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :lang_id => :query,
      :currency_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query,
      :report_request_id => :query,
      :disable_report_cache => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.info.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductInfo200Response}
    ])
  end

  @doc """
  product.list
  Get list of products from your store. Returns 10 products by default.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:product_ids` (String.t): Retrieves products specified by product ids
    - `:since_id` (String.t): Retrieve entities starting from the specified id.
    - `:categories_ids` (String.t): Retrieves products specified by categories ids
    - `:category_id` (String.t): Retrieves products specified by category id
    - `:store_id` (String.t): Retrieves products specified by store id
    - `:lang_id` (String.t): Retrieves products specified by language id
    - `:currency_id` (String.t): Currency Id
    - `:avail_view` (boolean()): Specifies the set of visible/invisible products
    - `:avail_sale` (boolean()): Specifies the set of available/not available products for sale
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:sku` (String.t): Filter by product's sku
    - `:brand_name` (String.t): Retrieves brands specified by brand name
    - `:product_attributes` ([String.t]): Defines product attributes
    - `:status` (String.t): Defines product's status
    - `:type` (String.t): Defines products's type
    - `:visible` (String.t): Filter items by visibility status
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Product search that is specified by field
    - `:return_global` (boolean()): Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:sort_by` (String.t): Set field to sort by
    - `:sort_direction` (String.t): Set sorting direction
    - `:report_request_id` (String.t): Report request id
    - `:disable_cache` (boolean()): Disable cache for current request
    - `:disable_report_cache` (boolean()): Disable report cache for current request
    - `:use_latest_api_version` (boolean()): Use the latest platform API version
    - `:product_type` (String.t): A categorization for the product

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductList.t} | {:error, Tesla.Env.t}
  def product_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :product_ids => :query,
      :since_id => :query,
      :categories_ids => :query,
      :category_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :currency_id => :query,
      :avail_view => :query,
      :avail_sale => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :sku => :query,
      :brand_name => :query,
      :product_attributes => :query,
      :status => :query,
      :type => :query,
      :visible => :query,
      :find_value => :query,
      :find_where => :query,
      :return_global => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :sort_by => :query,
      :sort_direction => :query,
      :report_request_id => :query,
      :disable_cache => :query,
      :disable_report_cache => :query,
      :use_latest_api_version => :query,
      :product_type => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductList}
    ])
  end

  @doc """
  product.manufacturer.add
  Add manufacturer to store and assign to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines products specified by product id
  - `manufacturer` (String.t): Defines product’s manufacturer's name
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductManufacturerAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_manufacturer_add(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductManufacturerAdd200Response.t} | {:error, Tesla.Env.t}
  def product_manufacturer_add(connection, product_id, manufacturer, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.manufacturer.add.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :manufacturer, manufacturer)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductManufacturerAdd200Response}
    ])
  end

  @doc """
  product.option.add
  Add product option from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_option_add` (ProductOptionAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductOptionAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductOptionAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductOptionAdd200Response.t} | {:error, Tesla.Env.t}
  def product_option_add(connection, product_option_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.option.add.json")
      |> add_param(:body, :body, product_option_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductOptionAdd200Response}
    ])
  end

  @doc """
  product.option.assign
  Assign option from product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the option should be assigned
  - `option_id` (String.t): Defines option id which has to be assigned
  - `opts` (keyword): Optional parameters
    - `:required` (boolean()): Defines if the option is required
    - `:sort_order` (integer()): Sort number in the list
    - `:option_values` (String.t): Defines option values that has to be assigned
    - `:clear_cache` (boolean()): Is cache clear required

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductOptionAssign200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_assign(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductOptionAssign200Response.t} | {:error, Tesla.Env.t}
  def product_option_assign(connection, product_id, option_id, opts \\ []) do
    optional_params = %{
      :required => :query,
      :sort_order => :query,
      :option_values => :query,
      :clear_cache => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.option.assign.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :option_id, option_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductOptionAssign200Response}
    ])
  end

  @doc """
  product.option.delete
  Product option delete.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `option_id` (String.t): Defines option id that should be deleted
  - `product_id` (String.t): Defines product id where the option should be deleted
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_option_delete(connection, option_id, product_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.option.delete.json")
      |> add_param(:query, :option_id, option_id)
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.option.list
  Get list of options.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:product_id` (String.t): Retrieves products' options specified by product id
    - `:lang_id` (String.t): Language id
    - `:store_id` (String.t): Store Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductOptionList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductOptionList.t} | {:error, Tesla.Env.t}
  def product_option_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :product_id => :query,
      :lang_id => :query,
      :store_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.option.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductOptionList}
    ])
  end

  @doc """
  product.option.value.add
  Add product option item from option.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the option value should be added
  - `option_id` (String.t): Defines option id where the value has to be added
  - `opts` (keyword): Optional parameters
    - `:option_value` (String.t): Defines option value that has to be added
    - `:sort_order` (integer()): Sort number in the list
    - `:display_value` (String.t): Defines the value that will be displayed for the option value
    - `:is_default` (boolean()): Defines as a default
    - `:clear_cache` (boolean()): Is cache clear required

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductOptionValueAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_value_add(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductOptionValueAdd200Response.t} | {:error, Tesla.Env.t}
  def product_option_value_add(connection, product_id, option_id, opts \\ []) do
    optional_params = %{
      :option_value => :query,
      :sort_order => :query,
      :display_value => :query,
      :is_default => :query,
      :clear_cache => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.option.value.add.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :option_id, option_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductOptionValueAdd200Response}
    ])
  end

  @doc """
  product.option.value.assign
  Assign product option item from product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_option_id` (integer()): Defines product's option id where the value has to be assigned
  - `option_value_id` (String.t): Defines value id that has to be assigned
  - `opts` (keyword): Optional parameters
    - `:clear_cache` (boolean()): Is cache clear required

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductOptionValueAssign200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_value_assign(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductOptionValueAssign200Response.t} | {:error, Tesla.Env.t}
  def product_option_value_assign(connection, product_option_id, option_value_id, opts \\ []) do
    optional_params = %{
      :clear_cache => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/product.option.value.assign.json")
      |> add_param(:query, :product_option_id, product_option_id)
      |> add_param(:query, :option_value_id, option_value_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductOptionValueAssign200Response}
    ])
  end

  @doc """
  product.option.value.delete
  Product option value delete.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `option_id` (String.t): Defines option id where the value should be deleted
  - `option_value_id` (String.t): Defines option value id that should be deleted
  - `product_id` (String.t): Defines product id where the option value should be deleted
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_value_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_option_value_delete(connection, option_id, option_value_id, product_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.option.value.delete.json")
      |> add_param(:query, :option_id, option_id)
      |> add_param(:query, :option_value_id, option_value_id)
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.option.value.update
  Update product option item from option.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the option value should be updated
  - `option_id` (String.t): Defines option id where the value has to be updated
  - `option_value_id` (String.t): Defines value id that has to be assigned
  - `opts` (keyword): Optional parameters
    - `:option_value` (String.t): Defines option value that has to be added
    - `:price` (float()): Defines new product option price
    - `:quantity` (float()): Defines new products' options quantity
    - `:display_value` (String.t): Defines the value that will be displayed for the option value
    - `:clear_cache` (boolean()): Is cache clear required

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_option_value_update(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_option_value_update(connection, product_id, option_id, option_value_id, opts \\ []) do
    optional_params = %{
      :option_value => :query,
      :price => :query,
      :quantity => :query,
      :display_value => :query,
      :clear_cache => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/product.option.value.update.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :option_id, option_id)
      |> add_param(:query, :option_value_id, option_value_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.price.add
  Add some prices to the product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_price_add` (ProductPriceAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartValidate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_price_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductPriceAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CartValidate200Response.t} | {:error, Tesla.Env.t}
  def product_price_add(connection, product_price_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.price.add.json")
      |> add_param(:body, :body, product_price_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartValidate200Response}
    ])
  end

  @doc """
  product.price.delete
  Delete some prices of the product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines the product where the price has to be deleted
  - `opts` (keyword): Optional parameters
    - `:group_prices` (String.t): Defines product's group prices
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_price_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_price_delete(connection, product_id, opts \\ []) do
    optional_params = %{
      :group_prices => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.price.delete.json")
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.price.update
  Update some prices of the product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_price_update` (ProductPriceUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_price_update(Tesla.Env.client, API2CartOpenAPI.Model.ProductPriceUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_price_update(connection, product_price_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/product.price.update.json")
      |> add_param(:body, :body, product_price_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.review.list
  Get reviews of a specific product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Product id
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:ids` (String.t): Retrieves reviews specified by ids
    - `:store_id` (String.t): Store Id
    - `:status` (String.t): Defines status
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseProductReviewList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_review_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseProductReviewList.t} | {:error, Tesla.Env.t}
  def product_review_list(connection, product_id, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :ids => :query,
      :store_id => :query,
      :status => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/product.review.list.json")
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseProductReviewList}
    ])
  end

  @doc """
  product.store.assign
  Assign product to store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines id of the product which should be assigned to a store
  - `store_id` (String.t): Defines id of the store product should be assigned to
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_store_assign(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_store_assign(connection, product_id, store_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.store.assign.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :store_id, store_id)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.tax.add
  Add tax class and tax rate to store and assign to product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_tax_add` (ProductTaxAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductTaxAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_tax_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductTaxAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductTaxAdd200Response.t} | {:error, Tesla.Env.t}
  def product_tax_add(connection, product_tax_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.tax.add.json")
      |> add_param(:body, :body, product_tax_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductTaxAdd200Response}
    ])
  end

  @doc """
  product.update
  This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_update` (ProductUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_update(Tesla.Env.client, API2CartOpenAPI.Model.ProductUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_update(connection, product_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/product.update.json")
      |> add_param(:body, :body, product_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.update.batch
  Update products on the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_update_batch` (ProductUpdateBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_update_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductUpdateBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_update_batch(connection, product_update_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.update.batch.json")
      |> add_param(:body, :body, product_update_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  product.variant.add
  Add variant to product.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_add` (ProductVariantAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductVariantAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductVariantAdd200Response.t} | {:error, Tesla.Env.t}
  def product_variant_add(connection, product_variant_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.add.json")
      |> add_param(:body, :body, product_variant_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductVariantAdd200Response}
    ])
  end

  @doc """
  product.variant.add.batch
  Add new product variants to the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_add_batch` (ProductVariantAddBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_add_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantAddBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_variant_add_batch(connection, product_variant_add_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.add.batch.json")
      |> add_param(:body, :body, product_variant_add_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  product.variant.delete
  Delete variant.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Defines variant removal, specified by variant id
  - `product_id` (String.t): Defines product's id where the variant has to be deleted
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t} | {:error, Tesla.Env.t}
  def product_variant_delete(connection, id, product_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.variant.delete.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeValueDelete200Response}
    ])
  end

  @doc """
  product.variant.delete.batch
  Remove product variants from the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_delete_batch` (ProductVariantDeleteBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_delete_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantDeleteBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_variant_delete_batch(connection, product_variant_delete_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.delete.batch.json")
      |> add_param(:body, :body, product_variant_delete_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  product.variant.image.add
  Add image to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_image_add` (ProductVariantImageAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ProductVariantImageAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_image_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantImageAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ProductVariantImageAdd200Response.t} | {:error, Tesla.Env.t}
  def product_variant_image_add(connection, product_variant_image_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.image.add.json")
      |> add_param(:body, :body, product_variant_image_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ProductVariantImageAdd200Response}
    ])
  end

  @doc """
  product.variant.image.delete
  Delete  image to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_id` (String.t): Defines product id where the variant image should be deleted
  - `product_variant_id` (String.t): Defines product's variants specified by variant id
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_image_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_variant_image_delete(connection, product_id, product_variant_id, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.variant.image.delete.json")
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :product_variant_id, product_variant_id)
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.variant.price.add
  Add some prices to the product variant.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_price_add` (ProductVariantPriceAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartValidate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_price_add(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantPriceAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CartValidate200Response.t} | {:error, Tesla.Env.t}
  def product_variant_price_add(connection, product_variant_price_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.price.add.json")
      |> add_param(:body, :body, product_variant_price_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartValidate200Response}
    ])
  end

  @doc """
  product.variant.price.delete
  Delete some prices of the product variant.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Defines the variant where the price has to be deleted
  - `product_id` (String.t): Product id
  - `group_prices` (String.t): Defines variants's group prices
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_price_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def product_variant_price_delete(connection, id, product_id, group_prices, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/product.variant.price.delete.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :product_id, product_id)
      |> add_param(:query, :group_prices, group_prices)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  product.variant.price.update
  Update some prices of the product variant.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_price_update` (ProductVariantPriceUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_price_update(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantPriceUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_variant_price_update(connection, product_variant_price_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/product.variant.price.update.json")
      |> add_param(:body, :body, product_variant_price_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.variant.update
  Update variant.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_update` (ProductVariantUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_update(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def product_variant_update(connection, product_variant_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/product.variant.update.json")
      |> add_param(:body, :body, product_variant_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  product.variant.update.batch
  Update products variants on the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `product_variant_update_batch` (ProductVariantUpdateBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_variant_update_batch(Tesla.Env.client, API2CartOpenAPI.Model.ProductVariantUpdateBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def product_variant_update_batch(connection, product_variant_update_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/product.variant.update.batch.json")
      |> add_param(:body, :body, product_variant_update_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end
end
