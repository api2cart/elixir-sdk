# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Cart do
  @moduledoc """
  API calls for all endpoints tagged `Cart`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  cart.bridge
  Get bridge key and store key

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartBridge200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_bridge(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartBridge200Response.t} | {:error, Tesla.Env.t}
  def cart_bridge(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cart.bridge.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartBridge200Response}
    ])
  end

  @doc """
  cart.catalog_price_rules.count
  Get count of cart catalog price rules discounts.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartCatalogPriceRulesCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_catalog_price_rules_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartCatalogPriceRulesCount200Response.t} | {:error, Tesla.Env.t}
  def cart_catalog_price_rules_count(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cart.catalog_price_rules.count.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartCatalogPriceRulesCount200Response}
    ])
  end

  @doc """
  cart.catalog_price_rules.list
  Get cart catalog price rules discounts.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:ids` (String.t): Retrieves  catalog_price_rules by ids
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartCatalogPriceRulesList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_catalog_price_rules_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartCatalogPriceRulesList.t} | {:error, Tesla.Env.t}
  def cart_catalog_price_rules_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :ids => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.catalog_price_rules.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartCatalogPriceRulesList}
    ])
  end

  @doc """
  cart.clear_cache
  Clear cache on store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `cache_type` (String.t): Defines which cache should be cleared.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartClearCache200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_clear_cache(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CartClearCache200Response.t} | {:error, Tesla.Env.t}
  def cart_clear_cache(connection, cache_type, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cart.clear_cache.json")
      |> add_param(:query, :cache_type, cache_type)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartClearCache200Response}
    ])
  end

  @doc """
  cart.config
  Get list of cart configs

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartConfig200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_config(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartConfig200Response.t} | {:error, Tesla.Env.t}
  def cart_config(connection, opts \\ []) do
    optional_params = %{
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.config.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartConfig200Response}
    ])
  end

  @doc """
  cart.config.update
  Use this API method to update custom data in client database.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `cart_config_update` (CartConfigUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_config_update(Tesla.Env.client, API2CartOpenAPI.Model.CartConfigUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CartConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def cart_config_update(connection, cart_config_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cart.config.update.json")
      |> add_param(:body, :body, cart_config_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartConfigUpdate200Response}
    ])
  end

  @doc """
  cart.coupon.add
  Use this method to create a coupon with specified conditions.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `cart_coupon_add` (CartCouponAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartCouponAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_coupon_add(Tesla.Env.client, API2CartOpenAPI.Model.CartCouponAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CartCouponAdd200Response.t} | {:error, Tesla.Env.t}
  def cart_coupon_add(connection, cart_coupon_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cart.coupon.add.json")
      |> add_param(:body, :body, cart_coupon_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartCouponAdd200Response}
    ])
  end

  @doc """
  cart.coupon.condition.add
  Use this method to add additional conditions for coupon application.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `coupon_id` (String.t): Coupon Id
  - `entity` (String.t): Defines condition entity type
  - `key` (String.t): Defines condition entity attribute key
  - `operator` (String.t): Defines condition operator
  - `value` (String.t): Defines condition value, can be comma separated according to the operator.
  - `opts` (keyword): Optional parameters
    - `:target` (String.t): Defines condition operator
    - `:include_tax` (boolean()): Indicates whether to apply a discount for taxes.
    - `:include_shipping` (boolean()): Indicates whether to apply a discount for shipping.
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_coupon_condition_add(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_coupon_condition_add(connection, coupon_id, entity, key, operator, value, opts \\ []) do
    optional_params = %{
      :target => :query,
      :include_tax => :query,
      :include_shipping => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/cart.coupon.condition.add.json")
      |> add_param(:query, :coupon_id, coupon_id)
      |> add_param(:query, :entity, entity)
      |> add_param(:query, :key, key)
      |> add_param(:query, :operator, operator)
      |> add_param(:query, :value, value)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response}
    ])
  end

  @doc """
  cart.coupon.count
  This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:avail` (boolean()): Defines category's visibility status
    - `:date_start_from` (String.t): Filter entity by date_start (greater or equal)
    - `:date_start_to` (String.t): Filter entity by date_start (less or equal)
    - `:date_end_from` (String.t): Filter entity by date_end (greater or equal)
    - `:date_end_to` (String.t): Filter entity by date_end (less or equal)

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartCouponCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_coupon_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartCouponCount200Response.t} | {:error, Tesla.Env.t}
  def cart_coupon_count(connection, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :avail => :query,
      :date_start_from => :query,
      :date_start_to => :query,
      :date_end_from => :query,
      :date_end_to => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.coupon.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartCouponCount200Response}
    ])
  end

  @doc """
  cart.coupon.delete
  Delete coupon

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_coupon_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_coupon_delete(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/cart.coupon.delete.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  cart.coupon.list
  Get cart coupon discounts.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:coupons_ids` (String.t): Filter coupons by ids
    - `:store_id` (String.t): Filter coupons by store id
    - `:lang_id` (String.t): Language id
    - `:avail` (boolean()): Filter coupons by avail status
    - `:date_start_from` (String.t): Filter entity by date_start (greater or equal)
    - `:date_start_to` (String.t): Filter entity by date_start (less or equal)
    - `:date_end_from` (String.t): Filter entity by date_end (greater or equal)
    - `:date_end_to` (String.t): Filter entity by date_end (less or equal)
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartCouponList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_coupon_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartCouponList.t} | {:error, Tesla.Env.t}
  def cart_coupon_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :coupons_ids => :query,
      :store_id => :query,
      :lang_id => :query,
      :avail => :query,
      :date_start_from => :query,
      :date_start_to => :query,
      :date_end_from => :query,
      :date_end_to => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.coupon.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartCouponList}
    ])
  end

  @doc """
  cart.create
  Add store to the account

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `cart_create` (CartCreate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountCartAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_create(Tesla.Env.client, API2CartOpenAPI.Model.CartCreate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountCartAdd200Response.t} | {:error, Tesla.Env.t}
  def cart_create(connection, cart_create, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cart.create.json")
      |> add_param(:body, :body, cart_create)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountCartAdd200Response}
    ])
  end

  @doc """
  cart.delete
  Remove store from API2Cart

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:delete_bridge` (boolean()): Identifies if there is a necessity to delete bridge

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_delete(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_delete(connection, opts \\ []) do
    optional_params = %{
      :delete_bridge => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/cart.delete.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartDelete200Response}
    ])
  end

  @doc """
  cart.disconnect
  Disconnect with the store and clear store session data.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:delete_bridge` (boolean()): Identifies if there is a necessity to delete bridge

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartDisconnect200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_disconnect(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartDisconnect200Response.t} | {:error, Tesla.Env.t}
  def cart_disconnect(connection, opts \\ []) do
    optional_params = %{
      :delete_bridge => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.disconnect.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartDisconnect200Response}
    ])
  end

  @doc """
  cart.giftcard.add
  Use this method to create a gift card for a specified amount.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `amount` (float()): Defines the gift card amount value.
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): Gift card code
    - `:owner_email` (String.t): Gift card owner email
    - `:recipient_email` (String.t): Gift card recipient email
    - `:recipient_name` (String.t): Gift card recipient name
    - `:owner_name` (String.t): Gift card owner name

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartGiftcardAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_giftcard_add(Tesla.Env.client, float(), keyword()) :: {:ok, API2CartOpenAPI.Model.CartGiftcardAdd200Response.t} | {:error, Tesla.Env.t}
  def cart_giftcard_add(connection, amount, opts \\ []) do
    optional_params = %{
      :code => :query,
      :owner_email => :query,
      :recipient_email => :query,
      :recipient_name => :query,
      :owner_name => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/cart.giftcard.add.json")
      |> add_param(:query, :amount, amount)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartGiftcardAdd200Response}
    ])
  end

  @doc """
  cart.giftcard.count
  Get gift cards count.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartGiftcardCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_giftcard_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartGiftcardCount200Response.t} | {:error, Tesla.Env.t}
  def cart_giftcard_count(connection, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.giftcard.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartGiftcardCount200Response}
    ])
  end

  @doc """
  cart.giftcard.delete
  Delete giftcard

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_giftcard_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_giftcard_delete(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/cart.giftcard.delete.json")
      |> add_param(:query, :id, id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  cart.giftcard.list
  Get gift cards list.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:store_id` (String.t): Store Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartGiftCardList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_giftcard_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartGiftCardList.t} | {:error, Tesla.Env.t}
  def cart_giftcard_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :store_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.giftcard.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartGiftCardList}
    ])
  end

  @doc """
  cart.info
  This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_info(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartInfo200Response.t} | {:error, Tesla.Env.t}
  def cart_info(connection, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.info.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartInfo200Response}
    ])
  end

  @doc """
  cart.list
  Get list of supported carts

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartList200Response.t} | {:error, Tesla.Env.t}
  def cart_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cart.list.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartList200Response}
    ])
  end

  @doc """
  cart.meta_data.list
  Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `entity_id` (String.t): Entity Id
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:entity` (String.t): Entity
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:key` (String.t): Key
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartMetaDataList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_meta_data_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartMetaDataList.t} | {:error, Tesla.Env.t}
  def cart_meta_data_list(connection, entity_id, opts \\ []) do
    optional_params = %{
      :count => :query,
      :page_cursor => :query,
      :entity => :query,
      :store_id => :query,
      :lang_id => :query,
      :key => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.meta_data.list.json")
      |> add_param(:query, :entity_id, entity_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartMetaDataList}
    ])
  end

  @doc """
  cart.meta_data.set
  Set meta data for a specific entity

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `entity_id` (String.t): Entity Id
  - `key` (String.t): Key
  - `value` (String.t): Value
  - `namespace` (String.t): Metafield namespace
  - `opts` (keyword): Optional parameters
    - `:entity` (String.t): Entity
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_meta_data_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t} | {:error, Tesla.Env.t}
  def cart_meta_data_set(connection, entity_id, key, value, namespace, opts \\ []) do
    optional_params = %{
      :entity => :query,
      :store_id => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/cart.meta_data.set.json")
      |> add_param(:query, :entity_id, entity_id)
      |> add_param(:query, :key, key)
      |> add_param(:query, :value, value)
      |> add_param(:query, :namespace, namespace)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAdd200Response}
    ])
  end

  @doc """
  cart.meta_data.unset
  Unset meta data for a specific entity

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `entity_id` (String.t): Entity Id
  - `key` (String.t): Key
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:entity` (String.t): Entity
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_meta_data_unset(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_meta_data_unset(connection, entity_id, key, id, opts \\ []) do
    optional_params = %{
      :entity => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/cart.meta_data.unset.json")
      |> add_param(:query, :entity_id, entity_id)
      |> add_param(:query, :key, key)
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.BasketLiveShippingServiceDelete200Response}
    ])
  end

  @doc """
  cart.methods
  Returns a list of supported API methods.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartMethods200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_methods(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartMethods200Response.t} | {:error, Tesla.Env.t}
  def cart_methods(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cart.methods.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartMethods200Response}
    ])
  end

  @doc """
  cart.plugin.list
  Get a list of third-party plugins installed on the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartPluginList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_plugin_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartPluginList200Response.t} | {:error, Tesla.Env.t}
  def cart_plugin_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.plugin.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartPluginList200Response}
    ])
  end

  @doc """
  cart.script.add
  Add new script to the storefront

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): The user-friendly script name
    - `:description` (String.t): The user-friendly description
    - `:html` (String.t): An html string containing exactly one `script` tag.
    - `:src` (String.t): The URL of the remote script
    - `:load_method` (String.t): The load method to use for the script
    - `:scope` (String.t): The page or pages on the online store where the script should be included
    - `:events` (String.t): Event for run scripts
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartScriptAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_script_add(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartScriptAdd200Response.t} | {:error, Tesla.Env.t}
  def cart_script_add(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :description => :query,
      :html => :query,
      :src => :query,
      :load_method => :query,
      :scope => :query,
      :events => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/cart.script.add.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartScriptAdd200Response}
    ])
  end

  @doc """
  cart.script.delete
  Remove script from the storefront

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_script_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def cart_script_delete(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/cart.script.delete.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  cart.script.list
  Get scripts installed to the storefront

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:script_ids` (String.t): Retrieves only scripts with specific ids
    - `:store_id` (String.t): Store Id
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartScriptList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_script_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartScriptList.t} | {:error, Tesla.Env.t}
  def cart_script_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :script_ids => :query,
      :store_id => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.script.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartScriptList}
    ])
  end

  @doc """
  cart.shipping_zones.list
  Get list of shipping zones

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:store_id` (String.t): Store Id
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCartShippingZonesList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_shipping_zones_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCartShippingZonesList.t} | {:error, Tesla.Env.t}
  def cart_shipping_zones_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :store_id => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.shipping_zones.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCartShippingZonesList}
    ])
  end

  @doc """
  cart.validate
  This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:validate_version` (boolean()): Specify if api2cart should validate cart version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CartValidate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cart_validate(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CartValidate200Response.t} | {:error, Tesla.Env.t}
  def cart_validate(connection, opts \\ []) do
    optional_params = %{
      :validate_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cart.validate.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CartValidate200Response}
    ])
  end
end
