# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Batch do
  @moduledoc """
  API calls for all endpoints tagged `Batch`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  batch.job.list
  Get list of recent jobs

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:processed_from` (String.t): Retrieve entities according to their processing datetime
    - `:processed_to` (String.t): Retrieve entities according to their processing datetime
    - `:ids` (String.t): Filter batch jobs by ids
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseBatchJobList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_job_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseBatchJobList.t} | {:error, Tesla.Env.t}
  def batch_job_list(connection, opts \\ []) do
    optional_params = %{
      :count => :query,
      :page_cursor => :query,
      :created_from => :query,
      :created_to => :query,
      :processed_from => :query,
      :processed_to => :query,
      :ids => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/batch.job.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseBatchJobList}
    ])
  end

  @doc """
  batch.job.result
  Get job result data

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ResponseBatchJobResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_job_result(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ResponseBatchJobResult.t} | {:error, Tesla.Env.t}
  def batch_job_result(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/batch.job.result.json")
      |> add_param(:query, :id, id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ResponseBatchJobResult}
    ])
  end
end
