# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Customer do
  @moduledoc """
  API calls for all endpoints tagged `Customer`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  customer.add
  Add customer into store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `customer_add` (CustomerAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_add(Tesla.Env.client, API2CartOpenAPI.Model.CustomerAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerAdd200Response.t} | {:error, Tesla.Env.t}
  def customer_add(connection, customer_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/customer.add.json")
      |> add_param(:body, :body, customer_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerAdd200Response}
    ])
  end

  @doc """
  customer.address.add
  Add customer address.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `customer_address_add` (CustomerAddressAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_address_add(Tesla.Env.client, API2CartOpenAPI.Model.CustomerAddressAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t} | {:error, Tesla.Env.t}
  def customer_address_add(connection, customer_address_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/customer.address.add.json")
      |> add_param(:body, :body, customer_address_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAdd200Response}
    ])
  end

  @doc """
  customer.attribute.list
  Get attributes for specific customer

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `customer_id` (String.t): Retrieves orders specified by customer id
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCustomerAttributeList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_attribute_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCustomerAttributeList.t} | {:error, Tesla.Env.t}
  def customer_attribute_list(connection, customer_id, opts \\ []) do
    optional_params = %{
      :count => :query,
      :page_cursor => :query,
      :store_id => :query,
      :lang_id => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.attribute.list.json")
      |> add_param(:query, :customer_id, customer_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCustomerAttributeList}
    ])
  end

  @doc """
  customer.count
  Get number of customers from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:group_id` (String.t): Customer group_id
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:store_id` (String.t): Counts customer specified by store id
    - `:customer_list_id` (String.t): The numeric ID of the customer list in Demandware.
    - `:avail` (boolean()): Defines category's visibility status
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Counts customers that are searched specified by field
    - `:ids` (String.t): Counts customers specified by ids
    - `:since_id` (String.t): Retrieve entities starting from the specified id.

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerCount200Response.t} | {:error, Tesla.Env.t}
  def customer_count(connection, opts \\ []) do
    optional_params = %{
      :group_id => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :store_id => :query,
      :customer_list_id => :query,
      :avail => :query,
      :find_value => :query,
      :find_where => :query,
      :ids => :query,
      :since_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerCount200Response}
    ])
  end

  @doc """
  customer.delete
  Delete customer from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Identifies customer specified by the id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerDelete200Response.t} | {:error, Tesla.Env.t}
  def customer_delete(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/customer.delete.json")
      |> add_param(:query, :id, id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerDelete200Response}
    ])
  end

  @doc """
  customer.find
  Find customers in store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `find_value` (String.t): Entity search that is specified by some value
  - `opts` (keyword): Optional parameters
    - `:find_where` (String.t): Entity search that is specified by the comma-separated unique fields
    - `:find_params` (String.t): Entity search that is specified by comma-separated parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerFind200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_find(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerFind200Response.t} | {:error, Tesla.Env.t}
  def customer_find(connection, find_value, opts \\ []) do
    optional_params = %{
      :find_where => :query,
      :find_params => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.find.json")
      |> add_param(:query, :find_value, find_value)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerFind200Response}
    ])
  end

  @doc """
  customer.group.add
  Create customer group.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `name` (String.t): Customer group name
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:stores_ids` (String.t): Assign customer group to the stores that is specified by comma-separated stores' id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerGroupAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_group_add(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerGroupAdd200Response.t} | {:error, Tesla.Env.t}
  def customer_group_add(connection, name, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :stores_ids => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/customer.group.add.json")
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerGroupAdd200Response}
    ])
  end

  @doc """
  customer.group.list
  Get list of customers groups.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:disable_cache` (boolean()): Disable cache for current request
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:group_ids` (String.t): Groups that will be assigned to a customer
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCustomerGroupList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_group_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCustomerGroupList.t} | {:error, Tesla.Env.t}
  def customer_group_list(connection, opts \\ []) do
    optional_params = %{
      :disable_cache => :query,
      :page_cursor => :query,
      :start => :query,
      :count => :query,
      :store_id => :query,
      :lang_id => :query,
      :group_ids => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.group.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCustomerGroupList}
    ])
  end

  @doc """
  customer.info
  Get customers' details from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Retrieves customer's info specified by customer id
  - `opts` (keyword): Optional parameters
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:store_id` (String.t): Retrieves customer info specified by store id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CustomerInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_info(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CustomerInfo200Response.t} | {:error, Tesla.Env.t}
  def customer_info(connection, id, opts \\ []) do
    optional_params = %{
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.info.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CustomerInfo200Response}
    ])
  end

  @doc """
  customer.list
  Get list of customers from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:group_id` (String.t): Customer group_id
    - `:store_id` (String.t): Retrieves customers specified by store id
    - `:customer_list_id` (String.t): The numeric ID of the customer list in Demandware.
    - `:avail` (boolean()): Defines category's visibility status
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Customer search that is specified by field
    - `:sort_by` (String.t): Set field to sort by
    - `:sort_direction` (String.t): Set sorting direction
    - `:ids` (String.t): Retrieves customers specified by ids
    - `:since_id` (String.t): Retrieve entities starting from the specified id.

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCustomerList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCustomerList.t} | {:error, Tesla.Env.t}
  def customer_list(connection, opts \\ []) do
    optional_params = %{
      :page_cursor => :query,
      :start => :query,
      :count => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :group_id => :query,
      :store_id => :query,
      :customer_list_id => :query,
      :avail => :query,
      :find_value => :query,
      :find_where => :query,
      :sort_by => :query,
      :sort_direction => :query,
      :ids => :query,
      :since_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCustomerList}
    ])
  end

  @doc """
  customer.update
  Update information of customer in store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `customer_update` (CustomerUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_update(Tesla.Env.client, API2CartOpenAPI.Model.CustomerUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def customer_update(connection, customer_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/customer.update.json")
      |> add_param(:body, :body, customer_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  customer.wishlist.list
  Get a Wish List of customer from the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `customer_id` (String.t): Retrieves orders specified by customer id
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): Entity id
    - `:store_id` (String.t): Store Id
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCustomerWishlistList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec customer_wishlist_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCustomerWishlistList.t} | {:error, Tesla.Env.t}
  def customer_wishlist_list(connection, customer_id, opts \\ []) do
    optional_params = %{
      :id => :query,
      :store_id => :query,
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customer.wishlist.list.json")
      |> add_param(:query, :customer_id, customer_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCustomerWishlistList}
    ])
  end
end
