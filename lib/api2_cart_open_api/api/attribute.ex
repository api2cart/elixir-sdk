# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Attribute do
  @moduledoc """
  API calls for all endpoints tagged `Attribute`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  attribute.add
  Add new attribute

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `type` (String.t): Defines attribute's type
  - `name` (String.t): Defines attributes's name
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): Entity code
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:visible` (boolean()): Set visibility status
    - `:required` (boolean()): Defines if the option is required
    - `:position` (integer()): Attribute`s position
    - `:attribute_group_id` (String.t): Filter by attribute_group_id
    - `:is_global` (String.t): Attribute saving scope
    - `:is_searchable` (boolean()): Use attribute in Quick Search
    - `:is_filterable` (String.t): Use In Layered Navigation
    - `:is_comparable` (boolean()): Comparable on Front-end
    - `:is_html_allowed_on_front` (boolean()): Allow HTML Tags on Frontend
    - `:is_filterable_in_search` (boolean()): Use In Search Results Layered Navigation
    - `:is_configurable` (boolean()): Use To Create Configurable Product
    - `:is_visible_in_advanced_search` (boolean()): Use in Advanced Search
    - `:is_used_for_promo_rules` (boolean()): Use for Promo Rule Conditions
    - `:used_in_product_listing` (boolean()): Used in Product Listing
    - `:used_for_sort_by` (boolean()): Used for Sorting in Product Listing
    - `:apply_to` (String.t): Types of products which can have this attribute

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_add(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t} | {:error, Tesla.Env.t}
  def attribute_add(connection, type, name, opts \\ []) do
    optional_params = %{
      :code => :query,
      :store_id => :query,
      :lang_id => :query,
      :visible => :query,
      :required => :query,
      :position => :query,
      :attribute_group_id => :query,
      :is_global => :query,
      :is_searchable => :query,
      :is_filterable => :query,
      :is_comparable => :query,
      :is_html_allowed_on_front => :query,
      :is_filterable_in_search => :query,
      :is_configurable => :query,
      :is_visible_in_advanced_search => :query,
      :is_used_for_promo_rules => :query,
      :used_in_product_listing => :query,
      :used_for_sort_by => :query,
      :apply_to => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/attribute.add.json")
      |> add_param(:query, :type, type)
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAdd200Response}
    ])
  end

  @doc """
  attribute.assign.group
  Assign attribute to the group

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `group_id` (String.t): Attribute group_id
  - `opts` (keyword): Optional parameters
    - `:attribute_set_id` (String.t): Attribute set id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAssignGroup200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_assign_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAssignGroup200Response.t} | {:error, Tesla.Env.t}
  def attribute_assign_group(connection, id, group_id, opts \\ []) do
    optional_params = %{
      :attribute_set_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/attribute.assign.group.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :group_id, group_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAssignGroup200Response}
    ])
  end

  @doc """
  attribute.assign.set
  Assign attribute to the attribute set

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `attribute_set_id` (String.t): Attribute set id
  - `opts` (keyword): Optional parameters
    - `:group_id` (String.t): Attribute group_id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAssignGroup200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_assign_set(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAssignGroup200Response.t} | {:error, Tesla.Env.t}
  def attribute_assign_set(connection, id, attribute_set_id, opts \\ []) do
    optional_params = %{
      :group_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/attribute.assign.set.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :attribute_set_id, attribute_set_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAssignGroup200Response}
    ])
  end

  @doc """
  attribute.attributeset.list
  Get attribute_set list

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseAttributeAttributesetList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_attributeset_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseAttributeAttributesetList.t} | {:error, Tesla.Env.t}
  def attribute_attributeset_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/attribute.attributeset.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseAttributeAttributesetList}
    ])
  end

  @doc """
  attribute.count
  Get attributes count

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:type` (String.t): Defines attribute's type
    - `:attribute_set_id` (String.t): Filter items by attribute set id
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:visible` (boolean()): Filter items by visibility status
    - `:required` (boolean()): Defines if the option is required
    - `:system` (boolean()): True if attribute is system

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeCount200Response.t} | {:error, Tesla.Env.t}
  def attribute_count(connection, opts \\ []) do
    optional_params = %{
      :type => :query,
      :attribute_set_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :visible => :query,
      :required => :query,
      :system => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/attribute.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeCount200Response}
    ])
  end

  @doc """
  attribute.delete
  Delete attribute from store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def attribute_delete(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/attribute.delete.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  attribute.group.list
  Get attribute group list

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:lang_id` (String.t): Language id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:attribute_set_id` (String.t): Attribute set id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseAttributeGroupList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_group_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseAttributeGroupList.t} | {:error, Tesla.Env.t}
  def attribute_group_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :lang_id => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query,
      :attribute_set_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/attribute.group.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseAttributeGroupList}
    ])
  end

  @doc """
  attribute.info
  Get information about a specific global attribute by its ID.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `opts` (keyword): Optional parameters
    - `:attribute_set_id` (String.t): Attribute set id
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_info(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeInfo200Response.t} | {:error, Tesla.Env.t}
  def attribute_info(connection, id, opts \\ []) do
    optional_params = %{
      :attribute_set_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/attribute.info.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeInfo200Response}
    ])
  end

  @doc """
  attribute.list
  Get a list of global attributes.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:type` (String.t): Defines attribute's type
    - `:attribute_ids` (String.t): Filter attributes by ids
    - `:attribute_set_id` (String.t): Filter items by attribute set id
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Retrieves attributes on specified language id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:visible` (boolean()): Filter items by visibility status
    - `:required` (boolean()): Defines if the option is required
    - `:system` (boolean()): True if attribute is system

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseAttributeList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseAttributeList.t} | {:error, Tesla.Env.t}
  def attribute_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :type => :query,
      :attribute_ids => :query,
      :attribute_set_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :params => :query,
      :exclude => :query,
      :response_fields => :query,
      :visible => :query,
      :required => :query,
      :system => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/attribute.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseAttributeList}
    ])
  end

  @doc """
  attribute.type.list
  Get list of supported attributes types

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeTypeList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_type_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeTypeList200Response.t} | {:error, Tesla.Env.t}
  def attribute_type_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/attribute.type.list.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeTypeList200Response}
    ])
  end

  @doc """
  attribute.unassign.group
  Unassign attribute from group

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `group_id` (String.t): Customer group_id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeUnassignGroup200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_unassign_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeUnassignGroup200Response.t} | {:error, Tesla.Env.t}
  def attribute_unassign_group(connection, id, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/attribute.unassign.group.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :group_id, group_id)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeUnassignGroup200Response}
    ])
  end

  @doc """
  attribute.unassign.set
  Unassign attribute from attribute set

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `attribute_set_id` (String.t): Attribute set id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeUnassignGroup200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_unassign_set(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeUnassignGroup200Response.t} | {:error, Tesla.Env.t}
  def attribute_unassign_set(connection, id, attribute_set_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/attribute.unassign.set.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :attribute_set_id, attribute_set_id)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeUnassignGroup200Response}
    ])
  end

  @doc """
  attribute.update
  Update attribute data

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `name` (String.t): Defines new attributes's name
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t} | {:error, Tesla.Env.t}
  def attribute_update(connection, id, name, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/attribute.update.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeUpdate200Response}
    ])
  end

  @doc """
  attribute.value.add
  Add new value to attribute.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `attribute_id` (String.t): Attribute Id
  - `name` (String.t): Defines attribute value's name
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): Entity code
    - `:description` (String.t): Defines attribute value's description
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_value_add(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeAdd200Response.t} | {:error, Tesla.Env.t}
  def attribute_value_add(connection, attribute_id, name, opts \\ []) do
    optional_params = %{
      :code => :query,
      :description => :query,
      :store_id => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/attribute.value.add.json")
      |> add_param(:query, :attribute_id, attribute_id)
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeAdd200Response}
    ])
  end

  @doc """
  attribute.value.delete
  Delete attribute value.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `attribute_id` (String.t): Attribute Id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_value_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t} | {:error, Tesla.Env.t}
  def attribute_value_delete(connection, id, attribute_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/attribute.value.delete.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :attribute_id, attribute_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeValueDelete200Response}
    ])
  end

  @doc """
  attribute.value.update
  Update attribute value.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Defines attribute value's id
  - `attribute_id` (String.t): Attribute Id
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): Defines attribute value's name
    - `:description` (String.t): Defines new attribute value's description
    - `:code` (String.t): Entity code
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attribute_value_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeUpdate200Response.t} | {:error, Tesla.Env.t}
  def attribute_value_update(connection, id, attribute_id, opts \\ []) do
    optional_params = %{
      :name => :query,
      :description => :query,
      :code => :query,
      :store_id => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/attribute.value.update.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :attribute_id, attribute_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeUpdate200Response}
    ])
  end
end
