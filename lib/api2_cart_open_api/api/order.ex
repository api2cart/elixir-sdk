# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Order do
  @moduledoc """
  API calls for all endpoints tagged `Order`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  order.abandoned.list
  Get list of orders that were left by customers before completing the order.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:customer_id` (String.t): Retrieves orders specified by customer id
    - `:customer_email` (String.t): Retrieves orders specified by customer email
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:skip_empty_email` (boolean()): Filter empty emails
    - `:store_id` (String.t): Store Id
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderAbandonedList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_abandoned_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderAbandonedList.t} | {:error, Tesla.Env.t}
  def order_abandoned_list(connection, opts \\ []) do
    optional_params = %{
      :customer_id => :query,
      :customer_email => :query,
      :created_to => :query,
      :created_from => :query,
      :modified_to => :query,
      :modified_from => :query,
      :skip_empty_email => :query,
      :store_id => :query,
      :page_cursor => :query,
      :count => :query,
      :start => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.abandoned.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderAbandonedList}
    ])
  end

  @doc """
  order.add
  Add a new order to the cart.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_add` (OrderAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_add(Tesla.Env.client, API2CartOpenAPI.Model.OrderAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderAdd200Response.t} | {:error, Tesla.Env.t}
  def order_add(connection, order_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.add.json")
      |> add_param(:body, :body, order_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderAdd200Response}
    ])
  end

  @doc """
  order.count
  Count orders in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:customer_id` (String.t): Counts orders quantity specified by customer id
    - `:customer_email` (String.t): Counts orders quantity specified by customer email
    - `:order_status` (String.t): Counts orders quantity specified by order status
    - `:order_status_ids` ([String.t]): Retrieves orders specified by order statuses
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:store_id` (String.t): Counts orders quantity specified by store id
    - `:ids` (String.t): Counts orders specified by ids
    - `:order_ids` (String.t): Counts orders specified by order ids
    - `:ebay_order_status` (String.t): Counts orders quantity specified by order status
    - `:financial_status` (String.t): Counts orders quantity specified by financial status
    - `:financial_status_ids` ([String.t]): Retrieves orders count specified by financial status ids
    - `:fulfillment_channel` (String.t): Retrieves order with a fulfillment channel
    - `:fulfillment_status` (String.t): Create order with fulfillment status
    - `:shipping_method` (String.t): Retrieve entities according to shipping method
    - `:delivery_method` (String.t): Retrieves order with delivery method
    - `:tags` (String.t): Order tags
    - `:ship_node_type` (String.t): Retrieves order with ship node type

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderCount200Response.t} | {:error, Tesla.Env.t}
  def order_count(connection, opts \\ []) do
    optional_params = %{
      :customer_id => :query,
      :customer_email => :query,
      :order_status => :query,
      :order_status_ids => :query,
      :created_to => :query,
      :created_from => :query,
      :modified_to => :query,
      :modified_from => :query,
      :store_id => :query,
      :ids => :query,
      :order_ids => :query,
      :ebay_order_status => :query,
      :financial_status => :query,
      :financial_status_ids => :query,
      :fulfillment_channel => :query,
      :fulfillment_status => :query,
      :shipping_method => :query,
      :delivery_method => :query,
      :tags => :query,
      :ship_node_type => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderCount200Response}
    ])
  end

  @doc """
  order.financial_status.list
  Retrieve list of financial statuses

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderFinancialStatusList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_financial_status_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderFinancialStatusList200Response.t} | {:error, Tesla.Env.t}
  def order_financial_status_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/order.financial_status.list.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderFinancialStatusList200Response}
    ])
  end

  @doc """
  order.find
  This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:customer_id` (String.t): Retrieves orders specified by customer id
    - `:customer_email` (String.t): Retrieves orders specified by customer email
    - `:order_status` (String.t): Retrieves orders specified by order status
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:financial_status` (String.t): Retrieves orders specified by financial status

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderFind200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_find(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderFind200Response.t} | {:error, Tesla.Env.t}
  def order_find(connection, opts \\ []) do
    optional_params = %{
      :customer_id => :query,
      :customer_email => :query,
      :order_status => :query,
      :start => :query,
      :count => :query,
      :params => :query,
      :exclude => :query,
      :created_to => :query,
      :created_from => :query,
      :modified_to => :query,
      :modified_from => :query,
      :financial_status => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.find.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderFind200Response}
    ])
  end

  @doc """
  order.fulfillment_status.list
  Retrieve list of fulfillment statuses

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:action` (String.t): Available statuses for the specified action.

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderFulfillmentStatusList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_fulfillment_status_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderFulfillmentStatusList200Response.t} | {:error, Tesla.Env.t}
  def order_fulfillment_status_list(connection, opts \\ []) do
    optional_params = %{
      :action => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.fulfillment_status.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderFulfillmentStatusList200Response}
    ])
  end

  @doc """
  order.info
  Info about a specific order by ID

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:order_id` (String.t): Retrieves order’s info specified by order id
    - `:id` (String.t): Retrieves order info specified by id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:store_id` (String.t): Defines store id where the order should be found
    - `:enable_cache` (boolean()): If the value is 'true' and order exist in our cache, we will return order.info response from cache
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_info(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderInfo200Response.t} | {:error, Tesla.Env.t}
  def order_info(connection, opts \\ []) do
    optional_params = %{
      :order_id => :query,
      :id => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :store_id => :query,
      :enable_cache => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.info.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderInfo200Response}
    ])
  end

  @doc """
  order.list
  Get list of orders from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:customer_id` (String.t): Retrieves orders specified by customer id
    - `:customer_email` (String.t): Retrieves orders specified by customer email
    - `:phone` (String.t): Filter orders by customer's phone number
    - `:order_status` (String.t): Retrieves orders specified by order status
    - `:order_status_ids` ([String.t]): Retrieves orders specified by order statuses
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:sort_by` (String.t): Set field to sort by
    - `:sort_direction` (String.t): Set sorting direction
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:store_id` (String.t): Store Id
    - `:ids` (String.t): Retrieves orders specified by ids
    - `:order_ids` (String.t): Retrieves orders specified by order ids
    - `:ebay_order_status` (String.t): Retrieves orders specified by order status
    - `:basket_id` (String.t): Retrieves order’s info specified by basket id.
    - `:financial_status` (String.t): Retrieves orders specified by financial status
    - `:financial_status_ids` ([String.t]): Retrieves orders specified by financial status ids
    - `:fulfillment_status` (String.t): Create order with fulfillment status
    - `:fulfillment_channel` (String.t): Retrieves order with a fulfillment channel
    - `:shipping_method` (String.t): Retrieve entities according to shipping method
    - `:skip_order_ids` (String.t): Skipped orders by ids
    - `:since_id` (String.t): Retrieve entities starting from the specified id.
    - `:is_deleted` (boolean()): Filter deleted orders
    - `:shipping_country_iso3` (String.t): Retrieve entities according to shipping country
    - `:enable_cache` (boolean()): If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
    - `:delivery_method` (String.t): Retrieves order with delivery method
    - `:tags` (String.t): Order tags
    - `:ship_node_type` (String.t): Retrieves order with ship node type
    - `:currency_id` (String.t): Currency Id
    - `:return_status` (String.t): Retrieves orders specified by return status
    - `:use_latest_api_version` (boolean()): Use the latest platform API version

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderList.t} | {:error, Tesla.Env.t}
  def order_list(connection, opts \\ []) do
    optional_params = %{
      :customer_id => :query,
      :customer_email => :query,
      :phone => :query,
      :order_status => :query,
      :order_status_ids => :query,
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :sort_by => :query,
      :sort_direction => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :created_to => :query,
      :created_from => :query,
      :modified_to => :query,
      :modified_from => :query,
      :store_id => :query,
      :ids => :query,
      :order_ids => :query,
      :ebay_order_status => :query,
      :basket_id => :query,
      :financial_status => :query,
      :financial_status_ids => :query,
      :fulfillment_status => :query,
      :fulfillment_channel => :query,
      :shipping_method => :query,
      :skip_order_ids => :query,
      :since_id => :query,
      :is_deleted => :query,
      :shipping_country_iso3 => :query,
      :enable_cache => :query,
      :delivery_method => :query,
      :tags => :query,
      :ship_node_type => :query,
      :currency_id => :query,
      :return_status => :query,
      :use_latest_api_version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderList}
    ])
  end

  @doc """
  order.preestimate_shipping.list
  Retrieve list of order preestimated shipping methods

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_preestimate_shipping_list` (OrderPreestimateShippingList): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderPreestimateShippingList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_preestimate_shipping_list(Tesla.Env.client, API2CartOpenAPI.Model.OrderPreestimateShippingList.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderPreestimateShippingList.t} | {:error, Tesla.Env.t}
  def order_preestimate_shipping_list(connection, order_preestimate_shipping_list, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.preestimate_shipping.list.json")
      |> add_param(:body, :body, order_preestimate_shipping_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderPreestimateShippingList}
    ])
  end

  @doc """
  order.refund.add
  Add a refund to the order.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_refund_add` (OrderRefundAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderRefundAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_refund_add(Tesla.Env.client, API2CartOpenAPI.Model.OrderRefundAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderRefundAdd200Response.t} | {:error, Tesla.Env.t}
  def order_refund_add(connection, order_refund_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.refund.add.json")
      |> add_param(:body, :body, order_refund_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderRefundAdd200Response}
    ])
  end

  @doc """
  order.return.add
  Create new return request.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_return_add` (OrderReturnAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderReturnAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_return_add(Tesla.Env.client, API2CartOpenAPI.Model.OrderReturnAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderReturnAdd200Response.t} | {:error, Tesla.Env.t}
  def order_return_add(connection, order_return_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.return.add.json")
      |> add_param(:body, :body, order_return_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderReturnAdd200Response}
    ])
  end

  @doc """
  order.return.delete
  Delete return.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `return_id` (String.t): Return ID
  - `order_id` (String.t): Defines the order id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_return_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeValueDelete200Response.t} | {:error, Tesla.Env.t}
  def order_return_delete(connection, return_id, order_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/order.return.delete.json")
      |> add_param(:query, :return_id, return_id)
      |> add_param(:query, :order_id, order_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeValueDelete200Response}
    ])
  end

  @doc """
  order.return.update
  Update order's shipment information.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_return_update` (OrderReturnUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_return_update(Tesla.Env.client, API2CartOpenAPI.Model.OrderReturnUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def order_return_update(connection, order_return_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/order.return.update.json")
      |> add_param(:body, :body, order_return_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  order.shipment.add
  Add a shipment to the order.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_shipment_add` (OrderShipmentAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderShipmentAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_add(Tesla.Env.client, API2CartOpenAPI.Model.OrderShipmentAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderShipmentAdd200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_add(connection, order_shipment_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.shipment.add.json")
      |> add_param(:body, :body, order_shipment_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderShipmentAdd200Response}
    ])
  end

  @doc """
  order.shipment.add.batch
  Add a shipments to the orders.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_shipment_add_batch` (OrderShipmentAddBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_add_batch(Tesla.Env.client, API2CartOpenAPI.Model.OrderShipmentAddBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_add_batch(connection, order_shipment_add_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.shipment.add.batch.json")
      |> add_param(:body, :body, order_shipment_add_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  order.shipment.delete
  Delete order's shipment.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `shipment_id` (String.t): Shipment id indicates the number of delivery
  - `order_id` (String.t): Defines the order for which the shipment will be deleted
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderShipmentDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderShipmentDelete200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_delete(connection, shipment_id, order_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/order.shipment.delete.json")
      |> add_param(:query, :shipment_id, shipment_id)
      |> add_param(:query, :order_id, order_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderShipmentDelete200Response}
    ])
  end

  @doc """
  order.shipment.info
  Get information of shipment.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Entity id
  - `order_id` (String.t): Defines the order id
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderShipmentInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_info(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderShipmentInfo200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_info(connection, id, order_id, opts \\ []) do
    optional_params = %{
      :start => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.shipment.info.json")
      |> add_param(:query, :id, id)
      |> add_param(:query, :order_id, order_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderShipmentInfo200Response}
    ])
  end

  @doc """
  order.shipment.list
  Get list of shipments by orders.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_id` (String.t): Retrieves shipments specified by order id
  - `opts` (keyword): Optional parameters
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderShipmentList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderShipmentList.t} | {:error, Tesla.Env.t}
  def order_shipment_list(connection, order_id, opts \\ []) do
    optional_params = %{
      :page_cursor => :query,
      :start => :query,
      :count => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :store_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.shipment.list.json")
      |> add_param(:query, :order_id, order_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderShipmentList}
    ])
  end

  @doc """
  order.shipment.tracking.add
  Add order shipment's tracking info.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_shipment_tracking_add` (OrderShipmentTrackingAdd): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.OrderShipmentTrackingAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_tracking_add(Tesla.Env.client, API2CartOpenAPI.Model.OrderShipmentTrackingAdd.t, keyword()) :: {:ok, API2CartOpenAPI.Model.OrderShipmentTrackingAdd200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_tracking_add(connection, order_shipment_tracking_add, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/order.shipment.tracking.add.json")
      |> add_param(:body, :body, order_shipment_tracking_add)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.OrderShipmentTrackingAdd200Response}
    ])
  end

  @doc """
  order.shipment.update
  Update order's shipment information.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_shipment_update` (OrderShipmentUpdate): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_shipment_update(Tesla.Env.client, API2CartOpenAPI.Model.OrderShipmentUpdate.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def order_shipment_update(connection, order_shipment_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/order.shipment.update.json")
      |> add_param(:body, :body, order_shipment_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end

  @doc """
  order.status.list
  Retrieve list of statuses

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:action` (String.t): Available statuses for the specified action.
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderStatusList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_status_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderStatusList.t} | {:error, Tesla.Env.t}
  def order_status_list(connection, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :action => :query,
      :response_fields => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.status.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderStatusList}
    ])
  end

  @doc """
  order.transaction.list
  Retrieve list of order transaction

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_ids` (String.t): Retrieves order transactions specified by order ids
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:store_id` (String.t): Store Id
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseOrderTransactionList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_transaction_list(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseOrderTransactionList.t} | {:error, Tesla.Env.t}
  def order_transaction_list(connection, order_ids, opts \\ []) do
    optional_params = %{
      :count => :query,
      :store_id => :query,
      :params => :query,
      :response_fields => :query,
      :exclude => :query,
      :page_cursor => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/order.transaction.list.json")
      |> add_param(:query, :order_ids, order_ids)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseOrderTransactionList}
    ])
  end

  @doc """
  order.update
  Update existing order.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `order_id` (String.t): Defines the orders specified by order id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Defines store id where the order should be found
    - `:order_status` (String.t): Defines new order's status
    - `:cancellation_reason` (String.t): Defines the cancellation reason when the order will be canceled
    - `:comment` (String.t): Specifies order comment
    - `:admin_comment` (String.t): Specifies admin's order comment
    - `:admin_private_comment` (String.t): Specifies private admin's order comment
    - `:date_modified` (String.t): Specifies order's  modification date
    - `:date_finished` (String.t): Specifies order's  finished date
    - `:financial_status` (String.t): Update order financial status to specified
    - `:fulfillment_status` (String.t): Create order with fulfillment status
    - `:order_payment_method` (String.t): Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
    - `:send_notifications` (boolean()): Send notifications to customer after order was created
    - `:origin` (String.t): The source of the order
    - `:create_invoice` (boolean()): Determines whether an invoice should be created if it has not already been created
    - `:invoice_admin_comment` (String.t): Specifies admin's order invoice comment

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec order_update(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def order_update(connection, order_id, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :order_status => :query,
      :cancellation_reason => :query,
      :comment => :query,
      :admin_comment => :query,
      :admin_private_comment => :query,
      :date_modified => :query,
      :date_finished => :query,
      :financial_status => :query,
      :fulfillment_status => :query,
      :order_payment_method => :query,
      :send_notifications => :query,
      :origin => :query,
      :create_invoice => :query,
      :invoice_admin_comment => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/order.update.json")
      |> add_param(:query, :order_id, order_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end
end
