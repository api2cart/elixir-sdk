# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule API2CartOpenAPI.Api.Category do
  @moduledoc """
  API calls for all endpoints tagged `Category`.
  """

  alias API2CartOpenAPI.Connection
  import API2CartOpenAPI.RequestBuilder

  @doc """
  category.add
  Add new category in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `name` (String.t): Defines category's name that has to be added
  - `opts` (keyword): Optional parameters
    - `:description` (String.t): Defines category's description
    - `:short_description` (String.t): Defines short description
    - `:parent_id` (String.t): Adds categories specified by parent id
    - `:avail` (boolean()): Defines category's visibility status
    - `:created_time` (String.t): Entity's date creation
    - `:modified_time` (String.t): Entity's date modification
    - `:sort_order` (integer()): Sort number in the list
    - `:meta_title` (String.t): Defines unique meta title for each entity
    - `:meta_description` (String.t): Defines unique meta description of a entity
    - `:meta_keywords` (String.t): Defines unique meta keywords for each entity
    - `:seo_url` (String.t): Defines unique category's URL for SEO
    - `:store_id` (String.t): Store Id
    - `:stores_ids` (String.t): Create category in the stores that is specified by comma-separated stores' id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_add(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAdd200Response.t} | {:error, Tesla.Env.t}
  def category_add(connection, name, opts \\ []) do
    optional_params = %{
      :description => :query,
      :short_description => :query,
      :parent_id => :query,
      :avail => :query,
      :created_time => :query,
      :modified_time => :query,
      :sort_order => :query,
      :meta_title => :query,
      :meta_description => :query,
      :meta_keywords => :query,
      :seo_url => :query,
      :store_id => :query,
      :stores_ids => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/category.add.json")
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAdd200Response}
    ])
  end

  @doc """
  category.add.batch
  Add new categories to the store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `category_add_batch` (CategoryAddBatch): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_add_batch(Tesla.Env.client, API2CartOpenAPI.Model.CategoryAddBatch.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAddBatch200Response.t} | {:error, Tesla.Env.t}
  def category_add_batch(connection, category_add_batch, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/category.add.batch.json")
      |> add_param(:body, :body, category_add_batch)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAddBatch200Response}
    ])
  end

  @doc """
  category.assign
  Assign category to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `category_id` (String.t): Defines category assign, specified by category id
  - `product_id` (String.t): Defines category assign to the product, specified by product id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAssign200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_assign(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAssign200Response.t} | {:error, Tesla.Env.t}
  def category_assign(connection, category_id, product_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/category.assign.json")
      |> add_param(:query, :category_id, category_id)
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAssign200Response}
    ])
  end

  @doc """
  category.count
  Count categories in store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:parent_id` (String.t): Counts categories specified by parent id
    - `:store_id` (String.t): Counts category specified by store id
    - `:lang_id` (String.t): Counts category specified by language id
    - `:avail` (boolean()): Defines category's visibility status
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:product_type` (String.t): A categorization for the product
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Counts categories that are searched specified by field
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryCount200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_count(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryCount200Response.t} | {:error, Tesla.Env.t}
  def category_count(connection, opts \\ []) do
    optional_params = %{
      :parent_id => :query,
      :store_id => :query,
      :lang_id => :query,
      :avail => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :product_type => :query,
      :find_value => :query,
      :find_where => :query,
      :report_request_id => :query,
      :disable_report_cache => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/category.count.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryCount200Response}
    ])
  end

  @doc """
  category.delete
  Delete category in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Defines category removal, specified by category id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryDelete200Response.t} | {:error, Tesla.Env.t}
  def category_delete(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/category.delete.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryDelete200Response}
    ])
  end

  @doc """
  category.find
  Search category in store. \"Laptop\" is specified here by default.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `find_value` (String.t): Entity search that is specified by some value
  - `opts` (keyword): Optional parameters
    - `:find_where` (String.t): Entity search that is specified by the comma-separated unique fields
    - `:find_params` (String.t): Entity search that is specified by comma-separated parameters
    - `:store_id` (String.t): Store Id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryFind200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_find(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryFind200Response.t} | {:error, Tesla.Env.t}
  def category_find(connection, find_value, opts \\ []) do
    optional_params = %{
      :find_where => :query,
      :find_params => :query,
      :store_id => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/category.find.json")
      |> add_param(:query, :find_value, find_value)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryFind200Response}
    ])
  end

  @doc """
  category.image.add
  Add image to category

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `category_id` (String.t): Defines category id where the image should be added
  - `image_name` (String.t): Defines image's name
  - `url` (String.t): Defines URL of the image that has to be added
  - `type` (String.t): Defines image's types that are specified by comma-separated list
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id
    - `:label` (String.t): Defines alternative text that has to be attached to the picture
    - `:mime` (String.t): Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    - `:position` (integer()): Defines image’s position in the list

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryImageAdd200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_image_add(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryImageAdd200Response.t} | {:error, Tesla.Env.t}
  def category_image_add(connection, category_id, image_name, url, type, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :label => :query,
      :mime => :query,
      :position => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/category.image.add.json")
      |> add_param(:query, :category_id, category_id)
      |> add_param(:query, :image_name, image_name)
      |> add_param(:query, :url, url)
      |> add_param(:query, :type, type)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryImageAdd200Response}
    ])
  end

  @doc """
  category.image.delete
  Delete image

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `category_id` (String.t): Defines category id where the image should be deleted
  - `image_id` (String.t): Define image id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_image_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AttributeDelete200Response.t} | {:error, Tesla.Env.t}
  def category_image_delete(connection, category_id, image_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/category.image.delete.json")
      |> add_param(:query, :category_id, category_id)
      |> add_param(:query, :image_id, image_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AttributeDelete200Response}
    ])
  end

  @doc """
  category.info
  Get category info about category ID*** or specify other category ID.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Retrieves category's info specified by category id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Retrieves category info  specified by store id
    - `:lang_id` (String.t): Retrieves category info  specified by language id
    - `:schema_type` (String.t): The name of the requirements set for the provided schema.
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryInfo200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_info(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryInfo200Response.t} | {:error, Tesla.Env.t}
  def category_info(connection, id, opts \\ []) do
    optional_params = %{
      :store_id => :query,
      :lang_id => :query,
      :schema_type => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query,
      :report_request_id => :query,
      :disable_report_cache => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/category.info.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryInfo200Response}
    ])
  end

  @doc """
  category.list
  Get list of categories from store.

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): This parameter sets the number from which you want to get entities
    - `:count` (integer()): This parameter sets the entity amount that has to be retrieved. Max allowed count=250
    - `:page_cursor` (String.t): Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
    - `:store_id` (String.t): Retrieves categories specified by store id
    - `:lang_id` (String.t): Retrieves categorys specified by language id
    - `:parent_id` (String.t): Retrieves categories specified by parent id
    - `:avail` (boolean()): Defines category's visibility status
    - `:product_type` (String.t): A categorization for the product
    - `:created_from` (String.t): Retrieve entities from their creation date
    - `:created_to` (String.t): Retrieve entities to their creation date
    - `:modified_from` (String.t): Retrieve entities from their modification date
    - `:modified_to` (String.t): Retrieve entities to their modification date
    - `:find_value` (String.t): Entity search that is specified by some value
    - `:find_where` (String.t): Category search that is specified by field
    - `:response_fields` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:params` (String.t): Set this parameter in order to choose which entity fields you want to retrieve
    - `:exclude` (String.t): Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
    - `:report_request_id` (String.t): Report request id
    - `:disable_report_cache` (boolean()): Disable report cache for current request
    - `:disable_cache` (boolean()): Disable cache for current request

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.ModelResponseCategoryList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_list(Tesla.Env.client, keyword()) :: {:ok, API2CartOpenAPI.Model.ModelResponseCategoryList.t} | {:error, Tesla.Env.t}
  def category_list(connection, opts \\ []) do
    optional_params = %{
      :start => :query,
      :count => :query,
      :page_cursor => :query,
      :store_id => :query,
      :lang_id => :query,
      :parent_id => :query,
      :avail => :query,
      :product_type => :query,
      :created_from => :query,
      :created_to => :query,
      :modified_from => :query,
      :modified_to => :query,
      :find_value => :query,
      :find_where => :query,
      :response_fields => :query,
      :params => :query,
      :exclude => :query,
      :report_request_id => :query,
      :disable_report_cache => :query,
      :disable_cache => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/category.list.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.ModelResponseCategoryList}
    ])
  end

  @doc """
  category.unassign
  Unassign category to product

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `category_id` (String.t): Defines category unassign, specified by category id
  - `product_id` (String.t): Defines category unassign to the product, specified by product id
  - `opts` (keyword): Optional parameters
    - `:store_id` (String.t): Store Id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.CategoryAssign200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_unassign(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.CategoryAssign200Response.t} | {:error, Tesla.Env.t}
  def category_unassign(connection, category_id, product_id, opts \\ []) do
    optional_params = %{
      :store_id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/category.unassign.json")
      |> add_param(:query, :category_id, category_id)
      |> add_param(:query, :product_id, product_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.CategoryAssign200Response}
    ])
  end

  @doc """
  category.update
  Update category in store

  ### Parameters

  - `connection` (API2CartOpenAPI.Connection): Connection to server
  - `id` (String.t): Defines category update specified by category id
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): Defines new category’s name
    - `:description` (String.t): Defines new category's description
    - `:short_description` (String.t): Defines short description
    - `:parent_id` (String.t): Defines new parent category id
    - `:avail` (boolean()): Defines category's visibility status
    - `:sort_order` (integer()): Sort number in the list
    - `:modified_time` (String.t): Entity's date modification
    - `:meta_title` (String.t): Defines unique meta title for each entity
    - `:meta_description` (String.t): Defines unique meta description of a entity
    - `:meta_keywords` (String.t): Defines unique meta keywords for each entity
    - `:seo_url` (String.t): Defines unique category's URL for SEO
    - `:store_id` (String.t): Store Id
    - `:stores_ids` (String.t): Update category in the stores that is specified by comma-separated stores' id
    - `:lang_id` (String.t): Language id

  ### Returns

  - `{:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec category_update(Tesla.Env.client, String.t, keyword()) :: {:ok, API2CartOpenAPI.Model.AccountConfigUpdate200Response.t} | {:error, Tesla.Env.t}
  def category_update(connection, id, opts \\ []) do
    optional_params = %{
      :name => :query,
      :description => :query,
      :short_description => :query,
      :parent_id => :query,
      :avail => :query,
      :sort_order => :query,
      :modified_time => :query,
      :meta_title => :query,
      :meta_description => :query,
      :meta_keywords => :query,
      :seo_url => :query,
      :store_id => :query,
      :stores_ids => :query,
      :lang_id => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/category.update.json")
      |> add_param(:query, :id, id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, API2CartOpenAPI.Model.AccountConfigUpdate200Response}
    ])
  end
end
